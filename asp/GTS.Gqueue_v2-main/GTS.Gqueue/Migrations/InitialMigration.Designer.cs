// <auto-generated />
using System;
using GTS.Gqueue;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GTS.Gqueue.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20220304130619_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.2");

            modelBuilder.Entity("GTS.Gqueue.Entities.AwaitingPerson", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Dequeued")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("QueueId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("QueueId");

                    b.ToTable("AwaitingPeople");
                });

            modelBuilder.Entity("GTS.Gqueue.Entities.Queue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Queues");
                });

            modelBuilder.Entity("GTS.Gqueue.Entities.AwaitingPerson", b =>
                {
                    b.HasOne("GTS.Gqueue.Entities.Queue", "Queue")
                        .WithMany()
                        .HasForeignKey("QueueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Queue");
                });
#pragma warning restore 612, 618
        }
    }
}
